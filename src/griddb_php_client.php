<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.0
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('griddb_php_client')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_griddb_php_client.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('griddb_php_client.so')) return;
    } else {
      if (!dl('griddb_php_client.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



abstract class griddb_php_client {
	const GS_CONTAINER_COLLECTION = GS_CONTAINER_COLLECTION;

	const GS_CONTAINER_TIME_SERIES = GS_CONTAINER_TIME_SERIES;

	const GS_ROW_SET_CONTAINER_ROWS = 0;

	const GS_ROW_SET_AGGREGATION_RESULT = GS_ROW_SET_AGGREGATION_RESULT;

	const GS_ROW_SET_QUERY_ANALYSIS = GS_ROW_SET_QUERY_ANALYSIS;

	const GS_TYPE_STRING = GS_TYPE_STRING;

	const GS_TYPE_BOOL = GS_TYPE_BOOL;

	const GS_TYPE_BYTE = GS_TYPE_BYTE;

	const GS_TYPE_SHORT = GS_TYPE_SHORT;

	const GS_TYPE_INTEGER = GS_TYPE_INTEGER;

	const GS_TYPE_LONG = GS_TYPE_LONG;

	const GS_TYPE_FLOAT = GS_TYPE_FLOAT;

	const GS_TYPE_DOUBLE = GS_TYPE_DOUBLE;

	const GS_TYPE_TIMESTAMP = GS_TYPE_TIMESTAMP;

	const GS_TYPE_GEOMETRY = GS_TYPE_GEOMETRY;

	const GS_TYPE_BLOB = GS_TYPE_BLOB;

	const GS_TYPE_STRING_ARRAY = GS_TYPE_STRING_ARRAY;

	const GS_TYPE_BOOL_ARRAY = GS_TYPE_BOOL_ARRAY;

	const GS_TYPE_BYTE_ARRAY = GS_TYPE_BYTE_ARRAY;

	const GS_TYPE_SHORT_ARRAY = GS_TYPE_SHORT_ARRAY;

	const GS_TYPE_INTEGER_ARRAY = GS_TYPE_INTEGER_ARRAY;

	const GS_TYPE_LONG_ARRAY = GS_TYPE_LONG_ARRAY;

	const GS_TYPE_FLOAT_ARRAY = GS_TYPE_FLOAT_ARRAY;

	const GS_TYPE_DOUBLE_ARRAY = GS_TYPE_DOUBLE_ARRAY;

	const GS_TYPE_TIMESTAMP_ARRAY = GS_TYPE_TIMESTAMP_ARRAY;

	const GS_INDEX_FLAG_DEFAULT = 0;

	const GS_INDEX_FLAG_TREE = GS_INDEX_FLAG_TREE;

	const GS_INDEX_FLAG_HASH = GS_INDEX_FLAG_HASH;

	const GS_INDEX_FLAG_SPATIAL = GS_INDEX_FLAG_SPATIAL;

	const GS_FETCH_LIMIT = GS_FETCH_LIMIT;

	const GS_TIME_UNIT_YEAR = 0;

	const GS_TIME_UNIT_MONTH = GS_TIME_UNIT_MONTH;

	const GS_TIME_UNIT_DAY = GS_TIME_UNIT_DAY;

	const GS_TIME_UNIT_HOUR = GS_TIME_UNIT_HOUR;

	const GS_TIME_UNIT_MINUTE = GS_TIME_UNIT_MINUTE;

	const GS_TIME_UNIT_SECOND = GS_TIME_UNIT_SECOND;

	const GS_TIME_UNIT_MILLISECOND = GS_TIME_UNIT_MILLISECOND;

	const CLIENT_VERSION = CLIENT_VERSION;
}

/* PHP Proxy Classes */
class GSException extends Exception {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function get_code() {
		return GSException_get_code($this->_cPtr);
	}

	function what() {
		return GSException_what($this->_cPtr);
	}

	function is_timeout() {
		return GSException_is_timeout($this->_cPtr);
	}
}

class c_Resource {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($resource) {
		if (is_resource($resource) && get_resource_type($resource) === '_p_griddb__Resource') {
			$this->_cPtr=$resource;
			return;
		}
		$this->_cPtr=new_c_Resource($resource);
	}

	function get_error_stack_size() {
		return c_Resource_get_error_stack_size($this->_cPtr);
	}

	function get_error_code($stackIndex) {
		return c_Resource_get_error_code($this->_cPtr,$stackIndex);
	}

	function format_error_message($stackIndex,$bufSize) {
		return c_Resource_format_error_message($this->_cPtr,$stackIndex,$bufSize);
	}

	function format_error_location($stackIndex,$bufSize) {
		return c_Resource_format_error_location($this->_cPtr,$stackIndex,$bufSize);
	}
}

class AggregationResult extends c_Resource {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		c_Resource::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return c_Resource::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Resource::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	function get_long() {
		return AggregationResult_get_long($this->_cPtr);
	}

	function get_double() {
		return AggregationResult_get_double($this->_cPtr);
	}

	function get_timestamp() {
		return AggregationResult_get_timestamp($this->_cPtr);
	}
}

class TimeSeriesProperties {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($timeSeriesProps_or_elapsedTime,$timeUnit=null,$ExpirationDivisionCount=null) {
		if (is_resource($timeSeriesProps_or_elapsedTime) && get_resource_type($timeSeriesProps_or_elapsedTime) === '_p_griddb__TimeSeriesProperties') {
			$this->_cPtr=$timeSeriesProps_or_elapsedTime;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_TimeSeriesProperties($timeSeriesProps_or_elapsedTime); break;
		case 2: $this->_cPtr=new_TimeSeriesProperties($timeSeriesProps_or_elapsedTime,$timeUnit); break;
		default: $this->_cPtr=new_TimeSeriesProperties($timeSeriesProps_or_elapsedTime,$timeUnit,$ExpirationDivisionCount);
		}
	}

	function set_row_expiration_time($elapsedTime,$timeUnit) {
		TimeSeriesProperties_set_row_expiration_time($this->_cPtr,$elapsedTime,$timeUnit);
	}

	function set_expiration_division_count($count) {
		TimeSeriesProperties_set_expiration_division_count($this->_cPtr,$count);
	}

	function get_row_expiration_time() {
		return TimeSeriesProperties_get_row_expiration_time($this->_cPtr);
	}

	function get_row_expiration_time_unit() {
		return TimeSeriesProperties_get_row_expiration_time_unit($this->_cPtr);
	}

	function get_expiration_division_count() {
		return TimeSeriesProperties_get_expiration_division_count($this->_cPtr);
	}

	function gs_ptr() {
		return TimeSeriesProperties_gs_ptr($this->_cPtr);
	}
}

class ContainerInfo {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($containerInfo) {
		if (is_resource($containerInfo) && get_resource_type($containerInfo) === '_p_griddb__ContainerInfo') {
			$this->_cPtr=$containerInfo;
			return;
		}
		$this->_cPtr=new_ContainerInfo($containerInfo);
	}

	function get_column_count() {
		return ContainerInfo_get_column_count($this->_cPtr);
	}
}

class Row extends c_Resource {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		c_Resource::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return c_Resource::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Resource::__isset($var);
	}

	function __construct($row) {
		if (is_resource($row) && get_resource_type($row) === '_p_griddb__Row') {
			$this->_cPtr=$row;
			return;
		}
		$this->_cPtr=new_Row($row);
	}

	function set_field_by_string($column,$value) {
		Row_set_field_by_string($this->_cPtr,$column,$value);
	}

	function get_field_as_string($column) {
		return Row_get_field_as_string($this->_cPtr,$column);
	}

	function set_field_by_bool($column,$value) {
		Row_set_field_by_bool($this->_cPtr,$column,$value);
	}

	function get_field_as_bool($column) {
		return Row_get_field_as_bool($this->_cPtr,$column);
	}

	function set_field_by_long($column,$value) {
		Row_set_field_by_long($this->_cPtr,$column,$value);
	}

	function get_field_as_long($column) {
		return Row_get_field_as_long($this->_cPtr,$column);
	}

	function set_field_by_byte($column,$value) {
		Row_set_field_by_byte($this->_cPtr,$column,$value);
	}

	function get_field_as_byte($column) {
		return Row_get_field_as_byte($this->_cPtr,$column);
	}

	function set_field_by_short($column,$value) {
		Row_set_field_by_short($this->_cPtr,$column,$value);
	}

	function get_field_as_short($column) {
		return Row_get_field_as_short($this->_cPtr,$column);
	}

	function set_field_by_integer($column,$value) {
		Row_set_field_by_integer($this->_cPtr,$column,$value);
	}

	function get_field_as_integer($column) {
		return Row_get_field_as_integer($this->_cPtr,$column);
	}

	function set_field_by_float($column,$value) {
		Row_set_field_by_float($this->_cPtr,$column,$value);
	}

	function get_field_as_float($column) {
		return Row_get_field_as_float($this->_cPtr,$column);
	}

	function set_field_by_double($column,$value) {
		Row_set_field_by_double($this->_cPtr,$column,$value);
	}

	function get_field_as_double($column) {
		return Row_get_field_as_double($this->_cPtr,$column);
	}

	function set_field_by_timestamp($column,$value) {
		Row_set_field_by_timestamp($this->_cPtr,$column,$value);
	}

	function get_field_as_timestamp($column) {
		return Row_get_field_as_timestamp($this->_cPtr,$column);
	}

	function set_field_by_geometry($column,$value) {
		return Row_set_field_by_geometry($this->_cPtr,$column,$value);
	}

	function get_field_as_geometry($column) {
		return Row_get_field_as_geometry($this->_cPtr,$column);
	}

	function set_field_by_blob($column,$fieldValue) {
		Row_set_field_by_blob($this->_cPtr,$column,$fieldValue);
	}

	function get_field_as_blob($column) {
		return Row_get_field_as_blob($this->_cPtr,$column);
	}

	function set_field_by_string_array($column,$fieldValue,$size) {
		return Row_set_field_by_string_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function get_field_as_string_array($column,$fieldValue,$size) {
		Row_get_field_as_string_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function set_field_by_byte_array($column,$fieldValue) {
		return Row_set_field_by_byte_array($this->_cPtr,$column,$fieldValue);
	}

	function get_field_as_byte_array($column,$fieldValue,$size) {
		Row_get_field_as_byte_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function set_field_by_short_array($column,$fieldValue,$size) {
		return Row_set_field_by_short_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function get_field_as_short_array($column,$fieldValue,$size) {
		Row_get_field_as_short_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function set_field_by_integer_array($column,$fieldValue,$size) {
		return Row_set_field_by_integer_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function get_field_as_integer_array($column,$fieldValue,$size) {
		Row_get_field_as_integer_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function set_field_by_long_array($column,$fieldValue,$size) {
		return Row_set_field_by_long_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function get_field_as_long_array($column,$fieldValue,$size) {
		Row_get_field_as_long_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function set_field_by_float_array($column,$fieldValue,$size) {
		return Row_set_field_by_float_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function get_field_as_float_array($column,$fieldValue,$size) {
		Row_get_field_as_float_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function set_field_by_double_array($column,$fieldValue,$size) {
		Row_set_field_by_double_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function get_field_as_double_array($column,$fieldValue,$size) {
		Row_get_field_as_double_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function set_field_by_timestamp_array($column,$fieldValue,$size) {
		return Row_set_field_by_timestamp_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function get_field_as_timestamp_array($column,$fieldValue,$size) {
		Row_get_field_as_timestamp_array($this->_cPtr,$column,$fieldValue,$size);
	}

	function get_schema() {
		$r=Row_get_schema($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new ContainerInfo($r);
		}
		return $r;
	}

	function gs_ptr() {
		return Row_gs_ptr($this->_cPtr);
	}
}

class RowSet extends c_Resource {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		c_Resource::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return c_Resource::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Resource::__isset($var);
	}

	function __construct($rowSet) {
		if (is_resource($rowSet) && get_resource_type($rowSet) === '_p_griddb__RowSet') {
			$this->_cPtr=$rowSet;
			return;
		}
		$this->_cPtr=new_RowSet($rowSet);
	}

	function has_next() {
		return RowSet_has_next($this->_cPtr);
	}

	function get_next($row) {
		RowSet_get_next($this->_cPtr,$row);
	}

	function update_current($row) {
		RowSet_update_current($this->_cPtr,$row);
	}

	function get_size() {
		return RowSet_get_size($this->_cPtr);
	}

	function delete_current() {
		RowSet_delete_current($this->_cPtr);
	}

	function get_type() {
		return RowSet_get_type($this->_cPtr);
	}

	function get_next_aggregation() {
		$r=RowSet_get_next_aggregation($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new AggregationResult($r);
		}
		return $r;
	}

	function get_next_query_analysis() {
		return RowSet_get_next_query_analysis($this->_cPtr);
	}
}

class Query extends c_Resource {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		c_Resource::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return c_Resource::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Resource::__isset($var);
	}

	function __construct($query) {
		if (is_resource($query) && get_resource_type($query) === '_p_griddb__Query') {
			$this->_cPtr=$query;
			return;
		}
		$this->_cPtr=new_Query($query);
	}

	function fetch($forUpdate) {
		$r=Query_fetch($this->_cPtr,$forUpdate);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RowSet($r);
		}
		return $r;
	}

	function get_row_set() {
		$r=Query_get_row_set($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RowSet($r);
		}
		return $r;
	}

	function set_fetch_option_integer($fetchOption,$value) {
		Query_set_fetch_option_integer($this->_cPtr,$fetchOption,$value);
	}

	function set_fetch_option_long($fetchOption,$value) {
		Query_set_fetch_option_long($this->_cPtr,$fetchOption,$value);
	}

	function close() {
		Query_close($this->_cPtr);
	}

	function gs_ptr() {
		return Query_gs_ptr($this->_cPtr);
	}
}

class Container extends c_Resource {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		c_Resource::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return c_Resource::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Resource::__isset($var);
	}

	function __construct($container) {
		if (is_resource($container) && get_resource_type($container) === '_p_griddb__Container') {
			$this->_cPtr=$container;
			return;
		}
		$this->_cPtr=new_Container($container);
	}

	function create_index($columnName,$indexType) {
		Container_create_index($this->_cPtr,$columnName,$indexType);
	}

	function drop_index($columName,$indexType) {
		Container_drop_index($this->_cPtr,$columName,$indexType);
	}

	function flush() {
		Container_flush($this->_cPtr);
	}

	function create_row() {
		$r=Container_create_row($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Row($r);
		}
		return $r;
	}

	function put_row($row) {
		return Container_put_row($this->_cPtr,$row);
	}

	function put_multi_row($rowObjs) {
		return Container_put_multi_row($this->_cPtr,$rowObjs);
	}

	function query($queryString) {
		$r=Container_query($this->_cPtr,$queryString);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Query($r);
		}
		return $r;
	}

	function get_type() {
		return Container_get_type($this->_cPtr);
	}

	function abort() {
		Container_abort($this->_cPtr);
	}

	function set_auto_commit($enabled) {
		Container_set_auto_commit($this->_cPtr,$enabled);
	}

	function commit() {
		Container_commit($this->_cPtr);
	}

	function get_row_by_integer($key,$forUpdate,$row) {
		return Container_get_row_by_integer($this->_cPtr,$key,$forUpdate,$row);
	}

	function get_row_by_long($key,$forUpdate,$row) {
		return Container_get_row_by_long($this->_cPtr,$key,$forUpdate,$row);
	}

	function get_row_by_timestamp($key,$forUpdate,$row) {
		return Container_get_row_by_timestamp($this->_cPtr,$key,$forUpdate,$row);
	}

	function get_row_by_string($key,$forUpdate,$row) {
		return Container_get_row_by_string($this->_cPtr,$key,$forUpdate,$row);
	}

	function put_row_by_integer($key,$row) {
		return Container_put_row_by_integer($this->_cPtr,$key,$row);
	}

	function put_row_by_long($key,$row) {
		return Container_put_row_by_long($this->_cPtr,$key,$row);
	}

	function put_row_by_timestamp($key,$row) {
		return Container_put_row_by_timestamp($this->_cPtr,$key,$row);
	}

	function put_row_by_string($key,$row) {
		return Container_put_row_by_string($this->_cPtr,$key,$row);
	}

	function delete_row_by_integer($key) {
		return Container_delete_row_by_integer($this->_cPtr,$key);
	}

	function delete_row_by_long($key) {
		return Container_delete_row_by_long($this->_cPtr,$key);
	}

	function delete_row_by_timestamp($key) {
		return Container_delete_row_by_timestamp($this->_cPtr,$key);
	}

	function delete_row_by_string($key) {
		return Container_delete_row_by_string($this->_cPtr,$key);
	}
}

class PartitionController {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($controller) {
		if (is_resource($controller) && get_resource_type($controller) === '_p_griddb__PartitionController') {
			$this->_cPtr=$controller;
			return;
		}
		$this->_cPtr=new_PartitionController($controller);
	}

	function get_partition_count() {
		return PartitionController_get_partition_count($this->_cPtr);
	}

	function get_partition_container_count($partitionIndex) {
		return PartitionController_get_partition_container_count($this->_cPtr,$partitionIndex);
	}

	function get_partition_container_names($partitionIndex,$start,$limit=-1) {
		return PartitionController_get_partition_container_names($this->_cPtr,$partitionIndex,$start,$limit);
	}

	function get_partition_hosts($partitionIndex) {
		return PartitionController_get_partition_hosts($this->_cPtr,$partitionIndex);
	}

	function get_partition_index_of_container($containerName) {
		return PartitionController_get_partition_index_of_container($this->_cPtr,$containerName);
	}

	function get_partition_owner_host($partitionIndex) {
		return PartitionController_get_partition_owner_host($this->_cPtr,$partitionIndex);
	}

	function get_partition_backup_hosts($partitionIndex) {
		return PartitionController_get_partition_backup_hosts($this->_cPtr,$partitionIndex);
	}

	function assign_partition_preferable_host($partitionIndex,$host) {
		PartitionController_assign_partition_preferable_host($this->_cPtr,$partitionIndex,$host);
	}
}

class RowKeyPredicate extends c_Resource {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		c_Resource::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return c_Resource::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Resource::__isset($var);
	}

	function __construct($predicate) {
		if (is_resource($predicate) && get_resource_type($predicate) === '_p_griddb__RowKeyPredicate') {
			$this->_cPtr=$predicate;
			return;
		}
		$this->_cPtr=new_RowKeyPredicate($predicate);
	}

	function get_key_type() {
		return RowKeyPredicate_get_key_type($this->_cPtr);
	}

	function get_start_key_as_string() {
		return RowKeyPredicate_get_start_key_as_string($this->_cPtr);
	}

	function get_finish_key_as_string() {
		return RowKeyPredicate_get_finish_key_as_string($this->_cPtr);
	}

	function get_finish_key_as_integer() {
		return RowKeyPredicate_get_finish_key_as_integer($this->_cPtr);
	}

	function get_finish_key_as_long() {
		return RowKeyPredicate_get_finish_key_as_long($this->_cPtr);
	}

	function get_start_key_as_integer() {
		return RowKeyPredicate_get_start_key_as_integer($this->_cPtr);
	}

	function get_start_key_as_long() {
		return RowKeyPredicate_get_start_key_as_long($this->_cPtr);
	}

	function get_start_key_as_timestamp() {
		return RowKeyPredicate_get_start_key_as_timestamp($this->_cPtr);
	}

	function get_finish_key_as_timestamp() {
		return RowKeyPredicate_get_finish_key_as_timestamp($this->_cPtr);
	}

	function get_predicate_distinct_keys_as_string() {
		return RowKeyPredicate_get_predicate_distinct_keys_as_string($this->_cPtr);
	}

	function get_predicate_distinct_keys_as_integer() {
		return RowKeyPredicate_get_predicate_distinct_keys_as_integer($this->_cPtr);
	}

	function get_predicate_distinct_keys_as_long() {
		return RowKeyPredicate_get_predicate_distinct_keys_as_long($this->_cPtr);
	}

	function get_predicate_distinct_keys_as_timestamp() {
		return RowKeyPredicate_get_predicate_distinct_keys_as_timestamp($this->_cPtr);
	}

	function set_finish_key_by_string($finishKey) {
		RowKeyPredicate_set_finish_key_by_string($this->_cPtr,$finishKey);
	}

	function set_finish_key_by_integer($finishKey) {
		RowKeyPredicate_set_finish_key_by_integer($this->_cPtr,$finishKey);
	}

	function set_finish_key_by_long($finishKey) {
		RowKeyPredicate_set_finish_key_by_long($this->_cPtr,$finishKey);
	}

	function set_finish_key_by_timestamp($finishKey) {
		RowKeyPredicate_set_finish_key_by_timestamp($this->_cPtr,$finishKey);
	}

	function set_start_key_by_string($startKey) {
		RowKeyPredicate_set_start_key_by_string($this->_cPtr,$startKey);
	}

	function set_start_key_by_integer($startKey) {
		RowKeyPredicate_set_start_key_by_integer($this->_cPtr,$startKey);
	}

	function set_start_key_by_long($startKey) {
		RowKeyPredicate_set_start_key_by_long($this->_cPtr,$startKey);
	}

	function set_start_key_by_timestamp($startKey) {
		RowKeyPredicate_set_start_key_by_timestamp($this->_cPtr,$startKey);
	}

	function add_key_by_string($key) {
		RowKeyPredicate_add_key_by_string($this->_cPtr,$key);
	}

	function add_key_by_integer($key) {
		RowKeyPredicate_add_key_by_integer($this->_cPtr,$key);
	}

	function add_key_by_long($key) {
		RowKeyPredicate_add_key_by_long($this->_cPtr,$key);
	}

	function add_key_by_timestamp($key) {
		RowKeyPredicate_add_key_by_timestamp($this->_cPtr,$key);
	}

	function gs_ptr() {
		return RowKeyPredicate_gs_ptr($this->_cPtr);
	}
}

class Store extends c_Resource {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		c_Resource::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return c_Resource::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Resource::__isset($var);
	}

	function __construct($store) {
		if (is_resource($store) && get_resource_type($store) === '_p_griddb__Store') {
			$this->_cPtr=$store;
			return;
		}
		$this->_cPtr=new_Store($store);
	}

	function drop_container($name) {
		Store_drop_container($this->_cPtr,$name);
	}

	function get_container_info($containerName) {
		$r=Store_get_container_info($this->_cPtr,$containerName);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new ContainerInfo($r);
		}
		return $r;
	}

	function put_container($containerName,$props,$containerType,$modifiable=false,$rowKeyAssigned=null,$columnOrderIgnorable=null,$rowExpirationTime=null,$rowExpirationTimeUnit=null,$expirationDivisionCount=null) {
		switch (func_num_args()) {
		case 3: case 4: $r=Store_put_container($this->_cPtr,$containerName,$props,$containerType,$modifiable); break;
		case 5: $r=Store_put_container($this->_cPtr,$containerName,$props,$containerType,$modifiable,$rowKeyAssigned); break;
		case 6: $r=Store_put_container($this->_cPtr,$containerName,$props,$containerType,$modifiable,$rowKeyAssigned,$columnOrderIgnorable); break;
		case 7: $r=Store_put_container($this->_cPtr,$containerName,$props,$containerType,$modifiable,$rowKeyAssigned,$columnOrderIgnorable,$rowExpirationTime); break;
		case 8: $r=Store_put_container($this->_cPtr,$containerName,$props,$containerType,$modifiable,$rowKeyAssigned,$columnOrderIgnorable,$rowExpirationTime,$rowExpirationTimeUnit); break;
		default: $r=Store_put_container($this->_cPtr,$containerName,$props,$containerType,$modifiable,$rowKeyAssigned,$columnOrderIgnorable,$rowExpirationTime,$rowExpirationTimeUnit,$expirationDivisionCount);
		}
		if (!is_resource($r)) return $r;
		return new Container($r);
	}

	function get_container($containerName) {
		$r=Store_get_container($this->_cPtr,$containerName);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Container($r);
		}
		return $r;
	}

	function fetch_all($queryList) {
		Store_fetch_all($this->_cPtr,$queryList);
	}

	function put_multi_container_row($entryList) {
		Store_put_multi_container_row($this->_cPtr,$entryList);
	}

	function get_multi_container_row($predicateList) {
		return Store_get_multi_container_row($this->_cPtr,$predicateList);
	}

	function get_partition_controller() {
		$r=Store_get_partition_controller($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new PartitionController($r);
		}
		return $r;
	}

	function create_row_key_predicate($keyType) {
		$r=Store_create_row_key_predicate($this->_cPtr,$keyType);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new RowKeyPredicate($r);
		}
		return $r;
	}
}

class StoreFactory extends c_Resource {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		c_Resource::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return c_Resource::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return c_Resource::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	static function get_default() {
		$r=StoreFactory_get_default();
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StoreFactory($r);
		}
		return $r;
	}

	function get_store($props) {
		$r=StoreFactory_get_store($this->_cPtr,$props);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new Store($r);
		}
		return $r;
	}

	function set_properties($props) {
		StoreFactory_set_properties($this->_cPtr,$props);
	}

	function get_version() {
		return StoreFactory_get_version($this->_cPtr);
	}

	function close() {
		StoreFactory_close($this->_cPtr);
	}
}

class TimestampUtils {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_griddb_php_client_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_griddb_php_client_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	static function current() {
		return TimestampUtils_current();
	}

	static function add_time($timestamp,$amount,$timeUnit) {
		return TimestampUtils_add_time($timestamp,$amount,$timeUnit);
	}

	static function format_time($timestamp,$bufSize) {
		return TimestampUtils_format_time($timestamp,$bufSize);
	}

	static function parse($str) {
		return TimestampUtils_parse($str);
	}
}


?>
